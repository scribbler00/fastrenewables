# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/10_autoencoder_models.ipynb (unless otherwise specified).

__all__ = ['Autoencoder']

# Cell
import numpy as np
import torch
from torch import nn
from ..tabular.model import *
from ..timeseries.model import *
from fastai.tabular.all import *
from torch.autograd import Variable


# Cell
class Autoencoder(nn.Module):
    def __init__(self,encoder, decoder):
        super().__init__()
        self.encoder = encoder
        self.decoder = decoder

    def encode(self, categorical_data, continuous_data, as_np=False):
        z = self.encoder(categorical_data, continuous_data)

        if as_np: return to_np(z)
        else: return z


    def decode(self, categorical_data, continuous_data, as_np=False):
        x = self.decoder(categorical_data, continuous_data)

        if as_np: return to_np(x)
        else: return x

    def forward(self, categorical_data, continuous_data):
        x = self.encode(categorical_data, continuous_data)
        x = self.decode(categorical_data, x)

        return x