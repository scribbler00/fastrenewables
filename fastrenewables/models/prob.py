# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/11_probabilistic_models.ipynb (unless otherwise specified).

__all__ = ['MeanStdWrapper']

# Cell
import numpy as np
import torch
from torch import nn
from ..tabular.model import *
from fastai.tabular.data import *
from ..timeseries.model import *
from fastai.tabular.all import *
from torch.autograd import Variable
import pandas as pd
from ..losses import *
from fastai.losses import MSELossFlat

# Cell
class MeanStdWrapper(nn.Module):
    def __init__(self, model, last_layer_size):
        super().__init__()
        self.model = model
        self.decoder = nn.Linear(last_layer_size, 2)


    def forward(self, categorical_data, continuous_data):
        x = self.model(categorical_data, continuous_data)
        x = self.decoder(x)
        mean = x[:,0].reshape(-1,1)

        if self.training:
            var = x[:,1].reshape(-1,1)
        else:
            var = x[:,1].reshape(-1,1).exp()

        return (mean, var)
