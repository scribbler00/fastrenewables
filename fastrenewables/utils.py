# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00a_utils.ipynb (unless otherwise specified).

__all__ = ['contains_instance', 'filter_preds', 'flatten_ts', 'unflatten_to_ts']

# Cell
#export
from fastcore.test import *
import numpy as np

# Cell
def contains_instance(elements:list, instance):
    contains=False
    elements = list(elements)
    for element in elements:
        if isinstance(element, instance):
            contains=True
            break
    return contains

# Cell
def filter_preds(targets, preds, min_value=0, max_value=1.1, filter_nas=True):
    preds[preds < min_value] = min_value
    preds[preds > max_value] = max_value

    if filter_nas:
        mask_nans = ~np.isnan(preds)
        preds, targets = preds[mask_nans], targets[mask_nans]

    return targets, preds

# Cell
# hide
def flatten_ts(x):
    """assumes matrix of shape (n_samples, n_features, ts_length)"""
    if len(x.shape) in [1,2]:
        return x

    n_samples, n_features, ts_length = x.shape

    if isinstance(x, np.ndarray):
        x = x.swapaxes(1,2)
    else:
        x = x.permute(0,2,1)
    x = x.reshape(n_samples*ts_length, n_features)
    return x

def unflatten_to_ts(x, ts_length, n_features):
    """returns matrix of shape (n_samples, n_features, ts_length)"""
    if len(x) == 0 or n_features == 0:
        return x

    x = x.reshape(-1, ts_length, n_features)
    if isinstance(x, np.ndarray):
        x = x.swapaxes(1,2)
    else:
        x = x.permute(0,2,1)

    return x